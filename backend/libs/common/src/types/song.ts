// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: song.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "song";

export interface Song {
  id: string;
  title: string;
}

export interface CreateSongRequest {
  title: string;
}

export interface CreateSongResponse {
  id: string;
  title: string;
}

export interface FindALlSongsRequest {
}

export interface FindAllSongsResponse {
  songs: Song[];
}

export const SONG_PACKAGE_NAME = "song";

export interface SongServiceClient {
  findAllSongs(request: FindALlSongsRequest): Observable<FindAllSongsResponse>;

  createSong(request: CreateSongRequest): Observable<CreateSongResponse>;
}

export interface SongServiceController {
  findAllSongs(
    request: FindALlSongsRequest,
  ): Promise<FindAllSongsResponse> | Observable<FindAllSongsResponse> | FindAllSongsResponse;

  createSong(
    request: CreateSongRequest,
  ): Promise<CreateSongResponse> | Observable<CreateSongResponse> | CreateSongResponse;
}

export function SongServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findAllSongs", "createSong"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SongService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SongService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SONG_SERVICE_NAME = "SongService";
